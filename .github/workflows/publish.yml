name: Publish Helm charts to GHCR

on:
  push:
    tags:
      - "v*.*.*"   # e.g. v1.2.3

permissions:
  contents: write
  packages: write

jobs:
  publish:
    runs-on: ubuntu-latest
    env:
      REGISTRY: ghcr.io
      OWNER: ${{ github.repository_owner }}
      REPO:  ${{ github.event.repository.name }}
      ROOT: stable
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0   # required for diffing with previous tags

      - name: Setup Helm
        uses: azure/setup-helm@v4
        with:
          version: v3.14.4

      - name: Setup yq
        uses: mikefarah/yq@v4.44.3

      - name: Login GHCR (Helm OCI)
        run: |
          echo ${{ secrets.GITHUB_TOKEN }} | helm registry login ghcr.io -u ${{ github.actor }} --password-stdin

      - name: Detect changed charts since previous tag
        id: changed
        shell: bash
        run: |
          set -euo pipefail

          # previous tag (if any)
          PREV_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || true)
          echo "prev_tag=${PREV_TAG}" >> "$GITHUB_OUTPUT"

          # candidate chart dirs
          CANDIDATES=()
          while IFS= read -r -d '' d; do
            CANDIDATES+=("$d")
          done < <(find "$ROOT" -mindepth 1 -maxdepth 1 -type d -print0)

          CHANGED=""
          for CHDIR in "${CANDIDATES[@]}"; do
            [ -f "$CHDIR/Chart.yaml" ] || continue
            if [ -n "$PREV_TAG" ]; then
              # only mark as changed if diff exists between PREV_TAG..HEAD
              if git diff --quiet "$PREV_TAG"..HEAD -- "$CHDIR"; then
                continue
              fi
            fi
            CHANGED="$CHANGED $CHDIR"
          done

          echo "list=${CHANGED}" >> "$GITHUB_OUTPUT"

      - name: No charts changed â€” skip publish
        if: steps.changed.outputs.list == ''
        run: echo "No chart changes since previous tag."

      - name: Lint, package and push changed charts
        if: steps.changed.outputs.list != ''
        shell: bash
        run: |
          set -euo pipefail
          mkdir -p dist

          for CHDIR in ${{ steps.changed.outputs.list }}; do
            NAME=$(yq -r '.name' "$CHDIR/Chart.yaml")
            VERSION=$(yq -r '.version' "$CHDIR/Chart.yaml")
            TYPE=$(yq -r '.type // ""' "$CHDIR/Chart.yaml")

            echo "::group::${NAME} (${TYPE:-application}) v${VERSION}"

            # build dependencies first (supports file:// and oci:// repos)
            helm dependency build "$CHDIR" || helm dependency update "$CHDIR"

            helm lint "$CHDIR"
            helm package "$CHDIR" --destination dist
            helm push "dist/${NAME}-${VERSION}.tgz" "oci://${REGISTRY}/${OWNER}/${REPO}"
            echo "::endgroup::"
          done

      - name: Create Helm Repository Index
        if: steps.changed.outputs.list != ''
        shell: bash
        run: |
          set -euo pipefail
          
          # Create index.yaml from all charts in the repo
          helm repo index dist/ --url https://${OWNER}.github.io/${REPO}
          
          echo "index.yaml created in dist/ directory"

      - name: Upload chart artifacts
        if: steps.changed.outputs.list != ''
        uses: actions/upload-artifact@v4
        with:
          name: chart-artifacts
          path: dist/
          retention-days: 30

      - name: Create / Update GitHub Release with chart artifacts
        if: steps.changed.outputs.list != ''
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ github.ref_name }}
          files: dist/*.tgz
          fail_on_unmatched_files: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}   # explicit token
